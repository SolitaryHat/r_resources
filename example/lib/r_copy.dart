import 'package:flutter/material.dart';

/// THIS FILE IS GENERATED BY flutter_resources. DO NOT MODIFY MANULLY.

// ignore_for_file: avoid_classes_with_only_static_members,always_specify_types,lines_longer_than_80_chars,non_constant_identifier_names,prefer_double_quotes

class R {
  static final images = _ImageResources();
  static final svg = _SvgResources();
  static final fonts = _FontResources();
  static _Strings stringsOf(BuildContext context) => _Strings.of(context);
}

class _ImageResources {
  const _ImageResources();

  /// ![](/Users/nikitaivanov/Documents/projects/r_resources/example/assets/images/ic_individual_schools.png)
  final ic_individual_schools = r'assets/images/ic_individual_schools.png';
}

class _SvgResources {
  const _SvgResources();

  /// ![](/Users/nikitaivanov/Documents/projects/r_resources/example/assets/svg/filter.svg)
  final filter = r'assets/svg/filter.svg';
}

class _FontResources {
  const _FontResources();

  final noto_sans_bold = r'assets/fonts/NotoSans-Bold.ttf';
}

class _Strings {
  _Strings(this._locale, this._fallbackLocale);

  final Locale _locale;
  final Locale _fallbackLocale;

  static _Strings of(BuildContext context) {
    return Localizations.of<_Strings>(context, _Strings);
  }

  static const Map<String, Map<String, String>> _localizedValues = {
    'en_US': {
      'label_lorem_ipsum': r'Lorem ipsum',
      'label_hello': r'Color',
    },
    'en_GB': {
      'label_lorem_ipsum': r'Other lorem ipsum',
      'label_hello': r'Colour',
    },
    'ru': {
      'label_hello': r'Цвет',
    },
  };

  String _getString(String code) {
    return _localizedValues[_locale.toString()][code] ??
        _localizedValues[_fallbackLocale.toString()][code] ??
        code;
  }

  /// 'Lorem ipsum'
  String get label_lorem_ipsum => _getString('label_lorem_ipsum');

  String get label_hello => _getString('label_hello');
}

class RStringsDelegate extends LocalizationsDelegate<_Strings> {
  const RStringsDelegate({
    @required List<Locale> supportedLocales,
    @required Locale fallbackLocale,
  })  : assert(supportedLocales != null),
        assert(fallbackLocale != null),
        _supportedLocales = supportedLocales,
        _fallbackLocale = fallbackLocale;

  final List<Locale> _supportedLocales;
  final Locale _fallbackLocale;

  @override
  bool isSupported(Locale locale) =>
      _supportedLocales.contains(locale);

  @override
  Future<_Strings> load(Locale locale) async {
      print(locale);
      return _Strings(locale, _fallbackLocale);
  }

  @override
  bool shouldReload(covariant LocalizationsDelegate<_Strings> old) => false;
}
